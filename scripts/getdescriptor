#!/usr/bin/env python

import hashlib
from dataclasses import dataclass, field
from enum import IntEnum
from typing import Callable, List, Literal

import click
from ledger_bitcoin import createClient, Client, Chain as ClientChain

BIP32_HARDEN_BIT = 0x80000000
SCHEME = Literal["legacy", "segwit", "native_segwit", "taproot"]
CHAIN = Literal["main", "test", "regtest", "signet"]


class Change(IntEnum):
    External = 0
    Internal = 1


@dataclass
class Derivation:
    _path_list: List["Level"] = field(default_factory=list)

    def __truediv__(self, level: "Level") -> "Derivation":
        return Derivation(self._path_list + [level])

    @property
    def account(self) -> int:
        if self.depth < 3:
            raise ValueError(f"Insufficient HD tree depth: {self.depth}")
        return self._path_list[2].value

    @property
    def parent(self) -> "Derivation":
        return Derivation(self._path_list[:-1])

    @property
    def path(self) -> str:
        return "/".join(str(level) for level in self._path_list)

    @property
    def depth(self) -> int:
        return len(self._path_list)


@dataclass
class Level:
    _value: int

    @property
    def value(self) -> int:
        return self._value

    def h(self) -> "Level":
        return Level(self._value + BIP32_HARDEN_BIT)

    def __str__(self) -> str:
        if self._value & BIP32_HARDEN_BIT:
            value = self._value - BIP32_HARDEN_BIT
            return f"{value}'"
        return f"{self._value}"


def make_descriptor(
    fingerprint: bytes,
    xpub: str,
    scheme: SCHEME, derivation: Derivation, change: Change
) -> str:
    key_origin = f"{fingerprint.hex()}/{derivation.path}"

    fragment = f"[{key_origin}]{xpub}/{change}/*"

    if scheme == "legacy":
        return f"pkh({fragment})"
    elif scheme == "segwit":
        return f"sh(wpkh({fragment}))"
    elif scheme == "native_segwit":
        return f"wpkh({fragment})"
    elif scheme == "taproot":
        return f"tr({fragment})"

    raise ValueError(f"Invalid scheme: {scheme}")


def sha256(s) -> bytes:
    return hashlib.new("sha256", s).digest()


def ripemd160(s) -> bytes:
    return hashlib.new("ripemd160", s).digest()


def hash256(s) -> bytes:
    return sha256(sha256(s))


def hash160(s) -> bytes:
    return ripemd160(sha256(s))


def compress_public_key(public_key: bytes) -> bytes:
    # [TODO] - implement in ledgerwallet.crypto.ecc, or use ecdsa (lib)
    if len(public_key) == 64 + 1 and public_key[0] == 0x04:
        if public_key[64] & 1:
            return b"\x03" + public_key[1 : 32 + 1]
        else:
            return b"\x02" + public_key[1 : 32 + 1]
    elif len(public_key) == 32 + 1 and public_key[0] in (0x02, 0x03):
        return public_key
    else:
        raise ValueError("Invalid public key format")


def get_derivation_from_scheme(
    scheme: SCHEME, chain: CHAIN, account: int
) -> Derivation:
    m = Derivation()

    chain_level = 0 if chain == "main" else 1

    if scheme == "legacy":
        return m / Level(44).h() / Level(chain_level).h() / Level(account).h()
    elif scheme == "segwit":
        return m / Level(49).h() / Level(chain_level).h() / Level(account).h()
    elif scheme == "native_segwit":
        return m / Level(84).h() / Level(chain_level).h() / Level(account).h()
    elif scheme == "taproot":
        return m / Level(86).h() / Level(chain_level).h() / Level(account).h()

    raise ValueError(f"Bad derivation scheme: {scheme}")


def derive_output_descriptors(
    client: Client, scheme: SCHEME, chain: CHAIN, account: int
) -> Callable[[Change], str]:
    derivation = get_derivation_from_scheme(scheme, chain, account)
    fingerprint = client.get_master_fingerprint()
    xpub = client.get_extended_pubkey(derivation.path)

    def g(change: Change):
        return make_descriptor(fingerprint, xpub, scheme, derivation, change)

    return g


@click.command()
@click.option(
    "--scheme",
    type=click.Choice(SCHEME.__args__),
    required=True,
)
@click.option(
    "--chain",
    type=click.Choice(CHAIN.__args__),
    required=True,
)
@click.option("--account", type=int, required=True)
def main(scheme: SCHEME, chain: CHAIN, account):
    if chain == 'main':
        client_chain = ClientChain.MAIN
    elif chain == 'test':
        client_chain = ClientChain.TEST
    elif chain == 'regtest':
        client_chain = ClientChain.REGTEST
    elif chain == 'signet':
        client_chain = ClientChain.SIGNET
    else:
        raise ValueError(f"Invaid chain: {chain}")

    client = createClient(chain=client_chain)
    descriptor_factory = derive_output_descriptors(client, scheme, chain, account)
    click.echo(f"External: {descriptor_factory(Change.External)}")
    click.echo(f"Internal: {descriptor_factory(Change.Internal)}")

    client.stop()


if __name__ == "__main__":
    main()
